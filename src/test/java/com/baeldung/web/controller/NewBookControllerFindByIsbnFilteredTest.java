// ********RoostGPT********
/*
Test generated by RoostGPT for test testSpringBootWithAzure using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=findByIsbnFiltered_57def0aaed
ROOST_METHOD_SIG_HASH=findByIsbnFiltered_5a92ff7406

"""
Scenario 1: Test the correct filter apply on Book Entity

Details:
  TestName: verifyCorrectFilterApplyOnBookEntity.
  Description: This test will verify that the filter is applied correctly on the Book entity when calling findByIsbnFiltered() method.
  Execution:
    Arrange: Mock call to repo.findByIsbn() to return a Book object. Prepare expected filter and MappingJacksonValue object.
    Act: Call findByIsbnFiltered() method supplying a valid ISBN and fields string. 
    Assert: Assert that the returned MappingJacksonValue object equals to the expected one.
  Validation: 
    Confirm that the method correctly applies the filter to the Book object based on the supplied fields. This test is important to ensure that only specified fields are returned.


Scenario 2: Test response when non-existing ISBN is provided

Details:
  TestName: verifyResponseForNonExistingIsbn.
  Description: This test will ascertain how the method responds when it is called with a non-existing ISBN.
  Execution:
    Arrange: Mock call to repo.findByIsbn() to return null.
    Act: Call findByIsbnFiltered() method supplying a non-existing ISBN and fields string. 
    Assert: Expect an exception of type EntityNotFoundException thrown with the specific error message.
  Validation: 
    Confirm that the method correctly throws an exception with the appropriate error message if no Book with the supplied ISBN is found. This is critical to correctly notify consumers about nonexistent resources.


Scenario 3: Test method when ISBN parameter is empty or null

Details:
  TestName: verifyMethodWithEmptyOrNullIsbn.
  Description: This test is intended to verify how the method behaves when passed an empty or null ISBN parameter.
  Execution:
    Arrange: No setup required.
    Act: Call findByIsbnFiltered() method supplying an empty or null ISBN and fields string. 
    Assert: Expect an exception of type InvalidParameterException with a specific error message.
  Validation: 
    Confirm that the method correctly checks for and handles an invalid ISBN parameter. As a crucial input validation test, this is important to prevent incorrect results or system errors. 
 
Scenario 4: Test method when fields parameter is empty or null

Details:
  TestName: verifyMethodWithEmptyOrNullFieldsParam.
  Description: This test checks how the method reacts when supplied an empty or null fields parameter.
  Execution:
    Arrange: Mock call to repo.findByIsbn() to return a Book object.
    Act: Call findByIsbnFiltered() method supplying a valid ISBN and an empty or null fields string. 
    Assert: Assert that the returned MappingJacksonValue object's filter contains all the fields in the Book object.
  Validation: 
    Confirm that the method applies no filter and returns all fields of the Book object when the fields parameter is empty or null. This test is significant in ensuring that the fields argument is effectively optional.
"""
*/

// ********RoostGPT********
package com.baeldung.web.controller;

import org.junit.*;
import org.junit.runner.*;
import org.mockito.*;
import org.springframework.test.context.*;
import org.springframework.test.context.junit4.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.hamcrest.Matchers.instanceOf;

import com.baeldung.model.Book;
import com.baeldung.persistence.BookRepository;
import com.baeldung.web.error.Checks;
import com.baeldung.web.resource.NewBookResource;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.baeldung.web.controller.CartController;

import org.springframework.http.converter.json.MappingJacksonValue;
import javax.persistence.EntityNotFoundException;
import java.security.InvalidParameterException;


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = {BookRepository.class})
public class NewBookControllerFindByIsbnFilteredTest {

  @InjectMocks
  NewBookControllerFindByIsbnFiltered controller;

  @Mock
  BookRepository repo;

  @Mock
  NewBookResource mockBookResource;

  @Mock
  SimpleFilterProvider mockFilterProvider;

  @Test
  public void verifyCorrectFilterApplyOnBookEntity() {

     String isbn = "123456";
     String fields = "title,author";
     Book book = new Book();

     when(repo.findByIsbn(isbn)).thenReturn(book);
     MappingJacksonValue expectedValue = new MappingJacksonValue(new NewBookResource(book));
     assertThat(expectedValue, instanceOf(MappingJacksonValue.class));

     MappingJacksonValue result = controller.findByIsbnFiltered(fields, isbn);

     assertEquals(expectedValue.getValue(), result.getValue());
  }

  @Test(expected = EntityNotFoundException.class)
  public void verifyResponseForNonExistingIsbn() {

     String isbn = "123456";
     String fields = "title,author";

     when(repo.findByIsbn(isbn)).thenThrow(new EntityNotFoundException("No book found for isbn = " + isbn));

     controller.findByIsbnFiltered(fields, isbn);
  }

  // Comment: The business function needs to handle the case when isbn parameter passed is null or empty. 
  // Suggestion for business function: Throw an InvalidParameterException whenever the isbn parameter is empty or null.

  @Test(expected = InvalidParameterException.class)
  public void verifyMethodWithEmptyOrNullIsbn() {

     String isbn = null;
     String fields = "title,author";

     controller.findByIsbnFiltered(fields, isbn);
  }

  // Comment: The business function should be able to handle scenarios where the fields parameter is empty or null. 
  // Suggestion for business function: Define a default behavior when fields parameter is empty or null, that is, specify default fields to be filtered.

  @Test
  public void verifyMethodWithEmptyOrNullFieldsParam() {

    String isbn = "123456";
    String fields = null;
    Book book = new Book();

    when(repo.findByIsbn(isbn)).thenReturn(book);
    
    NewBookResource bookResource = new NewBookResource(book);
    bookResource.add(linkTo(methodOn(CartController.class).addNewBookToCart(bookResource)).withRel("add-to-cart"));

    MappingJacksonValue expectedValue = new MappingJacksonValue(bookResource);
    FilterProvider filterProvider = new SimpleFilterProvider().addFilter("bookFilter", SimpleBeanPropertyFilter.serializeAll());

    assertEquals(filterProvider, expectedValue.getFilters());
  }

}

